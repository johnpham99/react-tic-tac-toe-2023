* React Tic-Tac-Toe Challenge Solutions 2023

These are my personal solutions to the additional practice/challenges of [[https://react.dev/learn/tutorial-tic-tac-toe#][React's Tic-Tac-Toe tutorial]].

* General Info / Introduction
Located at the bottom of the tutorial page, here are the improvements made listed in order of increasing difficulty:
1. For the current move only, show "You are at move #..." instead of a button.
2. Rewrite =Board= to use two loops to make the squares instead of hardcoding them.
3. Add a toggle button that lets you sort the moves in either ascending or descending order.
4. When someone wins, highlight the three squares that caused the win (and when no one wins, display a message about the result being a draw).
5. Display the location for each move in the format (row,col) in the move history list.

/Note: It seems that in recent years these challenges were updated, which is why I specify the year of completion./

* Usage / Setup
#+BEGIN_SRC sh
git clone https://github.com/johnpham99/react-tic-tac-toe-2023.git
cd react-tic-tac-toe-2023
npm install
npm start
#+END_SRC

Or view it [[https://codesandbox.io/s/ancient-water-h5tz9s?file=/styles.css][here]].
* Implementation / Explanation
The code without the improvements can be found on the tutorial page. In case they are changed, I've included it as [[src/OriginalApp.js][OriginalApp.js]].

** Current Move Indicator
The arrow function in =Game= is what creates each item in the move list. =currentMove= keeps tracks of what move the game is on, so we simply need to create a conditional to check if =currentMove= matches the move that we are creating the list item for. If it is, instead of returning a button, we return text.

#+BEGIN_SRC js
  const moves = history.map((squares, move) => {
    let description;
    
    if (currentMove === move) {
      return <li key={move}>You are at move #{move}</li>;
    }

    if (move > 0) {
      description = "Go to move #" + move;
    } else {
      description = "Go to game start";
    }

    return (
      <li key={move}>
        <button onClick={() => jumpTo(move)}>{description}</button>
      </li>
    );
  });
#+END_SRC

** Rewrite =Board= with two loops
I couldn't find a way to put the for loops inside the return statement, so I created the for loops/the board outside of it. I essentially made an array of row divs that contained the Square components. I also made sure to include keys for the Squares and row divs to handle the unique "key" prop warning.

#+BEGIN_SRC js
  let board = [];
  for (let i = 0; i < 3; i++) {
    let row = [];
    for (let j = 0; j < 3; j++) {
      row.push(
        <Square
          key={i * 3 + j}
          value={squares[i * 3 + j]}
          onSquareClick={() => handleClick(i * 3 + j)}
        />
      );
    }
    board.push(
      <div key={i} className="board-row">
        {row}
      </div>
    );
  }

  return (
    <div>
      <div className="status">{status}</div>
      {board}
    </div>
  );
#+END_SRC

** Toggle Button that sorts move list
A rerender needs to happen everytime the user clicks on the button. Therefore, =Game= needs to have the move list's order as a state. =moves= is the array of list items. =<ol reversed>= reverses the numbering while =moves.reverse()= reverses the buttons. I changed =const moves= to =let moves= because of the potential in-place reversing.

#+BEGIN_SRC js
const [listOrder, setListOrder] = useState(true); //defaults to ascending order
function onToggleClick() {
  setListOrder(!listOrder);
}
//...
let moveList;
listOrder
  ? (moveList = <ol>{moves}</ol>)
  : (moveList = <ol reversed>{moves.reverse()}</ol>);
return (
  <div className="game">
    <div className="game-board">
      <Board
        xIsNext={xIsNext}
        squares={currentSquares}
        onPlay={handlePlay}
      />
    </div>
    <div className="game-info">
      <button onClick={onToggleClick}>Toggle List</button>
      {moveList}
    </div>
  </div>
);
#+END_SRC

** Highlight Winner Squares
We can obtain which line/squares won the game in =calculateWinner=. Instead of having the method return just the symbol of the winner, we have it return an array of the symbol and the squares the symbols are on.

#+BEGIN_SRC js
function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return [squares[a], a, b, c];
    }
  }

  return null;
}
#+END_SRC

When there is a winner and we check for the winner in =Board=, we can obtain the winning symbol and the winning squares. We create a new prop for =Square= that specifies whether or not that square is one of the winning squares. If it is, we give it a class with a different background color.

#+BEGIN_SRC js
function Square({ isWinning, value, onSquareClick }) {
  return (
    <button
      className={isWinning ? "winning-square" : "square"}
      onClick={onSquareClick}
    >
      {value}
    </button>
  );
}

function Board({ xIsNext, squares, onPlay, lastMove }) {
  //...
  const winner = calculateWinner(squares);
  let status;

  if (winner) {
    status = "Winner: " + winner[0];
  } else {
    status = "Next player: " + (xIsNext ? "X" : "O");
  }

  let board = [];
  for (let i = 0; i < 3; i++) {
    let row = [];
    for (let j = 0; j < 3; j++) {
      row.push(
        <Square
          key={i * 3 + j}
          value={squares[i * 3 + j]}
          onSquareClick={() => handleClick(i * 3 + j)}
          isWinning={winner ? winner.slice(1).includes(i * 3 + j) : null}
        />
      );
    }
    board.push(
      <div key={i} className="board-row">
        {row}
      </div>
    );
  }
  //...
}
#+END_SRC

#+BEGIN_SRC css
.winning-square {
  background-color: yellow;
  border: 1px solid #999;
  float: left;
  font-size: 24px;
  font-weight: bold;
  line-height: 34px;
  height: 34px;
  margin-right: -1px;
  margin-top: -1px;
  padding: 0;
  text-align: center;
  width: 34px;
}
#+END_SRC

** Draw Message
There is a draw when the game is on move 9 and there is no winner. We have =Game= pass a new prop to =Board= that says whether or not the game is on move 9.

#+BEGIN_SRC js
<Board
  xIsNext={xIsNext}
  squares={currentSquares}
  onPlay={handlePlay}
  lastMove={currentMove === 9}
/>
#+END_SRC

=Board= creates a draw status message if the last move has been played. But this message is overwritten if there is a winner. 

#+BEGIN_SRC js
function Board({ xIsNext, squares, onPlay, lastMove }) {
  //...
  const winner = calculateWinner(squares);
  let status;
  if (lastMove) {
    status = "Draw!";
  }
  if (winner) {
    status = "Winner: " + winner[0];
  } else {
    status = "Next player: " + (xIsNext ? "X" : "O");
  }
  //...
#+END_SRC

** Display Location of Moves
I changed =history= to not only contain the state of the squares but also contain the square that was changed during the state. Indices 0-9 represent the board and index 10 represents the square recently changed/clicked on.

#+BEGIN_SRC js
function Board({ xIsNext, squares, onPlay, lastMove }) {
  function handleClick(i) {
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    const nextSquares = squares.slice();
    if (xIsNext) {
      nextSquares[i] = "X";
    } else {
      nextSquares[i] = "O";
    }
    nextSquares[10] = i;
    onPlay(nextSquares);
  }
  //...
}

export default function Game() {
  const [history, setHistory] = useState([Array(10).fill(null)]);
  //...
    let row = Math.floor(squares[10] / 3) + 1;
    let col = (squares[10] % 3) + 1;

    if (move > 0) {
      description = "Go to move #" + move + " (" + row + "," + col + ")";
    } else {
      description = "Go to game start";
    }
  //...
#+END_SRC



